'use strict';

var htmlJSResults = {};
var trhValues = {
    'wordCount_trh': 7254,
    'distinctWordCount_trh': 2630,
    'avgWordLength_trh': 15,
    'tagCount_trh': 374,
    'urlCount_trh': 34,
    'iframeCount_trh': 0,
    'zeroIFrameCount_trh': 3,
    'dblDoc_trh': 'yes',
    'eval_trh': 1,
    'escape_trh': 2,
    'link_trh': 0,
    'exec_trh': 1,
    'unescape_trh': 0,
    'search_trh': 4,
    'unbound_trh': 0,
    'sum_trh': 4,
    'avgExec_trh': 139,
    'maxExec_trh': 549
};

var malIndex = 0;
var weights = {
    'wordCount_w': 0.765,
    'distinctWordCount_w': 0.787,
    'avgWordLength_w': 0.722,
    'tagCount_w': 0.726,
    'urlCount_w': 0.697
};


// Get html elements for threshold values
for (var name in trhValues) {
    document.getElementById(name).innerText = trhValues[name];
}

var urlField     = document.getElementById('examinedUrl');
var avgExecField = document.getElementById('avgExec_val');
var maxExecField = document.getElementById('maxExec_val');

chrome.storage.sync.get('currentUrl', function(data) {
    urlField.innerText = urlField.innerText + data.currentUrl;
});

// Get maximumg time and display hints if necessary
chrome.storage.sync.get('maxTime', function(data) {

    maxExecField.innerText = data.maxTime;

    /* Hint that devtools might not have been
        opened when time is set to zero */
    if (data.maxTime === 0) {
        document.getElementById('note').style.visibility = 'visible';
    } else if (data.maxTime < trhValues['maxExec_trh']) {
        maxExecField.classList.add('untracked_exceedance');
    }
});

// Get average time and display hints if necessary
chrome.storage.sync.get('avgTime', function(data) {

    avgExecField.innerText = data.avgTime;

    /* Hint that devtools might not have been
        opened when time is set to zero */
    if (data.avgTime === 0) {
        document.getElementById('note').style.visibility = 'visible';
    } else if (data.avgTime < trhValues['avgExec_trh']) {
        avgExecField.classList.add('untracked_ex');
    }
});

// Get html an js results and apply them to the view
chrome.storage.sync.get('html_js_results', function(data) {

    htmlJSResults = data.html_js_results;

    for (var name in htmlJSResults) {

        var trh_name = name.replace('_val', '_trh');
        var w_name = name.replace('_val', '_w');
        var elem = document.getElementById(name);
        elem.innerText = htmlJSResults[name];

        // Check for the boolean and make it readable
        if (name === 'dblDoc_val' && htmlJSResults[name]) {
            elem.innerText = 'yes';
            avgExecField.classList.add('untracked_ex');
            continue;
        } else if (name === 'dblDoc_val' && !htmlJSResults[name]) {
            elem.innerText = 'no';
            continue;
        }

        // Color fields if values under threshold
        if (htmlJSResults[name] < trhValues[trh_name]) {

            // Warn if a malware indicator is triggered and add its weight to total
            if (name === 'wordCount_val' || name === 'distinctWordCount_val' || name === 'avgWordLength_val'
                || name === 'tagCount_val' || name === 'urlCount_val')
            {
                elem.classList.add('warning');
                malIndex += weights[w_name];
            } else {
                elem.classList.add('untracked_ex');
            }

            // If the malware index is above 1.5 the website is classified as malicious
            if (malIndex > 1.5) {
                document.getElementById('resultNote').innerText = 'ATTENTION: Website is classified as malicious!!';
            }

        }

    }
});