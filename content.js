'use strict';

var words = [];
var distinctWords = [];

// Start analysis of features after click on plugin icon
chrome.runtime.onMessage.addListener(
    function (request, sender, sendResponse) {

        if (request.message === "clicked_malware_plugin") {

            // Get array with all words and one with distinct words
            helpers.getListofWords();
            helpers.getDistinctWords();

            var results = {
                "wordCount_val": words.length,
                "distinctWordCount_val": distinctWords.length,
                "avgWordLength_val": analyses.averageWordLength(),
                "tagCount_val": analyses.countHTMLTags(),
                "urlCount_val": analyses.countURLs(),
                "iframeCount_val": analyses.countIFrames().numberIFrames,
                "zeroIFrameCount_val": analyses.countIFrames().numberZeroIFrames,
                "dblDoc_val": analyses.doubleDocuments(),
                "eval_val": analyses.countJSFunctions().eval,
                "escape_val": analyses.countJSFunctions().escape,
                "link_val": analyses.countJSFunctions().link,
                "exec_val": analyses.countJSFunctions().exec,
                "unescape_val": analyses.countJSFunctions().unescape,
                "search_val": analyses.countJSFunctions().search,
                "unbound_val": analyses.countJSFunctions().unbound,
                "sum_val": analyses.sumJSFunctions()
            };

            // Write results to storage
            chrome.storage.sync.set({"html_js_results": results}, function () {
            });

            // Get url of current page under investigation
            var resultPage = chrome.runtime.getURL("result_page.html");

            if (confirm("Malware analysis complete. Do you want to see the results?")) {
                chrome.runtime.sendMessage({"message": "open_results_tab", "url": resultPage, "resultArr": results});
            } else {
            }


        }
    }
);

var helpers = {

    getListofWords: function () {
        var tags = [];
        var wordsList = [];

        for (var i = 0; i < document.getElementsByTagName('*').length; i++) {
            tags.push(document.getElementsByTagName('*')[i].outerHTML);
        }

        for (var i = 0; i < tags.length; i++) {

            var temp = tags[i].split(/[,\s]+|\s+|\n+|[=<>;{}]/gm);

            for (var i = 0; i < temp.length; i++) {
                if (temp[i] !== '' && temp[i] !== '""') {
                    wordsList.push(temp[i]);
                }
            }
        }

        words = wordsList;
    },

    getDistinctWords: function () {

        var distinctWordsList = [];

        $.each(words, function (i, el) {
            if ($.inArray(el, distinctWordsList) === -1) distinctWordsList.push(el);
        });

        distinctWords = distinctWordsList;
    },

    getURLContent: function (url) {
        var xml = new XMLHttpRequest();

        xml.onreadystatechange = function () {
            if (xml.readyState == 4 && xml.status == 200) {
                return xml.responseText;
            }
        };

        xml.open("GET", url);
        xml.send();

    }

};

var analyses = {

    averageWordLength: function () {

        var averageLength = 0;

        for (var i = 0; i < distinctWords.length; i++) {

            averageLength += distinctWords[i].length;
            if (i === distinctWords.length - 1) {
                averageLength = averageLength / i;
            }
        }

        return Math.round(averageLength);
    },

    countHTMLTags: function () {
        return document.getElementsByTagName('*').length;
    },

    countIFrames: function () {

        var iFrames = {
            'numberIFrames': 0,
            'numberZeroIFrames': 0
        };

        $("iframe").each(function () {
            iFrames['numberIFrames'] += 1;

            var height = $(this).attr('height');
            var width = $(this).attr('width');
            var vis = $(this).css('visibility');

            if (height < 2 || width < 2 || vis === 'hidden') {
                iFrames['numberZeroIFrames'] += 1;
            }

        });

        return iFrames;
    },


    doubleDocuments: function () {
        if (document.getElementsByTagName('html').length > 1
            || document.getElementsByTagName('head').length > 1
            || document.getElementsByTagName('title').length > 1
            || document.getElementsByTagName('body').length > 1
        ) {
            return true;
        }

        return false;
    },

    countURLs: function () {
        var urls = [];

        for (var i = 0; i < words.length; i++) {

            if (words[i].match(/http\w?:[/][/]+|[/]?[/]?\w+?\W+?www./gm)) {
                urls.push(words[i]);
            }
        }

        return urls.length;
    },

    countJSFunctions: function () {
        var jsFunctions = {
            'escape': 0,
            'eval': 0,
            'unescape': 0,
            'exec': 0,
            'search': 0,
            'link': 0,
            'unbound': 0
        };

        var scripts = [];

        for (var i = 0; i < words.length; i++) {

            words[i] = words[i].toLowerCase();

            if (words[i].match(/eval[(]/gm)) {
                jsFunctions.eval += words[i].match(/eval[(]/gm).length;
            } else if (words[i].match(/escape[(]/gm)) {
                jsFunctions.escape += 1;
            } else if (words[i].match(/exec[(]/gm)) {
                jsFunctions.exec += 1;
            } else if (words[i].match(/unescape[(]/gm)) {
                jsFunctions.unescape += 1;
            } else if (words[i].match(/link[(]/gm)) {
                jsFunctions.link += 1;
            } else if (words[i].match(/search[(]/gm)) {
                jsFunctions.search += 1;
            } else if (words[i].match(/unbound[(]/gm)) {
                jsFunctions.unbound += 1;
            }
        }

        $('script').each(function () {
            if (this.getAttribute('src') !== null) {
                scripts.push(this.getAttribute('src'));
            }
        });

        for (var i = 0; i < scripts.length; i++) {

            var urlContent = helpers.getURLContent(scripts[i]);

            if (urlContent === undefined) {
                continue;
            }

            urlContent = urlContent.toLowerCase();

            if (urlContent.match(/eval[(]/gm)) {
                jsFunctions.eval += urlContent.match(/eval[(]/gm).length;
            } else if (urlContent.match(/escape[(]/gm)) {
                jsFunctions.escape += urlContent.match(/escape[(]/gm).length;
            } else if (urlContent.match(/exec[(]/gm)) {
                jsFunctions.exec += urlContent.match(/exec[(]/gm).length;
            } else if (urlContent.match(/unescape[(]/gm)) {
                jsFunctions.unescape += urlContent.match(/unescape[(]/gm).length;
            } else if (urlContent.match(/link[(]/gm)) {
                jsFunctions.link += urlContent.match(/link[(]/gm).length;
            } else if (urlContent.match(/search[(]/gm)) {
                jsFunctions.search += urlContent.match(/search[(]/gm).length;
            } else if (urlContent.match(/unbound[(]/gm)) {
                jsFunctions.unbound += urlContent.match(/unbound[(]/gm).length;
            }

        }

        return jsFunctions;
    },

    sumJSFunctions: function () {
        var sum = 0;
        var arr = analyses.countJSFunctions();

        for (var key in arr) {
            sum += arr[key];
        }

        return sum;
    }
};
