'use strict';

var ports = [];
var maxTime = 0;
var avgTime = 0;
var arrTimes = [];
var tuples = {};

// Establish a permanent connection to the devtools
chrome.runtime.onConnect.addListener(function (port) {
    if (port.name !== "dev_port") return;
    ports.push(port);

    // Opportunity to delete port if it is not needed anymore
    port.onDisconnect.addListener(function () {
        var i = ports.indexOf(port);
        if (i !== -1) ports.splice(i, 1);
    });

    // Listen for messages from the devtools
    port.onMessage.addListener(function (execTimes) {
        var time = execTimes.post_time;
        var url = execTimes.post_url;

        /* Message is sent multiple times,
           only interesting if a time value is attached */
        if (time !== 0) {

            /* Add the time to the associative array with url as key
               to prevent double storage (no same keys allowed). */
            tuples[url] = time;

            // Create an array of all times to use for calculations
            arrTimes = [];
            for (var key in tuples) {
                arrTimes.push(tuples[key]);
            }

            // Maximum execution time
            maxTime = Math.max.apply(Math, arrTimes);

            // Average execution time
            var sum = 0;
            for (var i = 0; i < arrTimes.length; i++) {
                sum += arrTimes[i];
            }
            avgTime = sum / arrTimes.length;

        }
    });
});

/* Reset the variables after the result tab was created
   to prevent the summation of values. Computed values
   are already save in storage for result page. */
chrome.tabs.onCreated.addListener(function (tab){
    maxTime = 0;
    avgTime = 0;
    arrTimes = [];
    tuples = {};
});

/* When browser icon is clicked: save the current url of the tab
 in the storage and send a message to content.js to start analysis. */
chrome.browserAction.onClicked.addListener(function (tab) {

    chrome.tabs.query({active: true, currentWindow: true}, function (tabs) {
        var activeTab = tabs[0];
        chrome.storage.sync.set({currentUrl: activeTab.url}, function () {});
        chrome.tabs.sendMessage(activeTab.id, {"message": "clicked_malware_plugin"});

    });
});

// Open new tab with malware analysis results if user confirms it
chrome.runtime.onMessage.addListener(
    function (request, sender, sendResponse) {

        if (request.message === "open_results_tab") {

            // Reload window to get all network results
            chrome.tabs.reload();

            /* Save time values and display result tab
            after 3s to secure that every process finished. */
            setTimeout(function () {
                chrome.storage.sync.set({"avgTime": avgTime}, function () {});
                chrome.storage.sync.set({"maxTime": maxTime}, function () {});
                chrome.tabs.create({"url": request.url});
            }, 3000);
        }
    }
);